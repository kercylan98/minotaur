// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.28.0--rc1
// source: shared.proto

package prc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SharedClient is the client API for Shared service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SharedClient interface {
	StreamHandler(ctx context.Context, opts ...grpc.CallOption) (Shared_StreamHandlerClient, error)
}

type sharedClient struct {
	cc grpc.ClientConnInterface
}

func NewSharedClient(cc grpc.ClientConnInterface) SharedClient {
	return &sharedClient{cc}
}

func (c *sharedClient) StreamHandler(ctx context.Context, opts ...grpc.CallOption) (Shared_StreamHandlerClient, error) {
	stream, err := c.cc.NewStream(ctx, &Shared_ServiceDesc.Streams[0], "/prc.Shared/StreamHandler", opts...)
	if err != nil {
		return nil, err
	}
	x := &sharedStreamHandlerClient{stream}
	return x, nil
}

type Shared_StreamHandlerClient interface {
	Send(*SharedMessage) error
	Recv() (*SharedMessage, error)
	grpc.ClientStream
}

type sharedStreamHandlerClient struct {
	grpc.ClientStream
}

func (x *sharedStreamHandlerClient) Send(m *SharedMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *sharedStreamHandlerClient) Recv() (*SharedMessage, error) {
	m := new(SharedMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SharedServer is the server API for Shared service.
// All implementations must embed UnimplementedSharedServer
// for forward compatibility
type SharedServer interface {
	StreamHandler(Shared_StreamHandlerServer) error
	mustEmbedUnimplementedSharedServer()
}

// UnimplementedSharedServer must be embedded to have forward compatible implementations.
type UnimplementedSharedServer struct {
}

func (UnimplementedSharedServer) StreamHandler(Shared_StreamHandlerServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamHandler not implemented")
}
func (UnimplementedSharedServer) mustEmbedUnimplementedSharedServer() {}

// UnsafeSharedServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SharedServer will
// result in compilation errors.
type UnsafeSharedServer interface {
	mustEmbedUnimplementedSharedServer()
}

func RegisterSharedServer(s grpc.ServiceRegistrar, srv SharedServer) {
	s.RegisterService(&Shared_ServiceDesc, srv)
}

func _Shared_StreamHandler_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SharedServer).StreamHandler(&sharedStreamHandlerServer{stream})
}

type Shared_StreamHandlerServer interface {
	Send(*SharedMessage) error
	Recv() (*SharedMessage, error)
	grpc.ServerStream
}

type sharedStreamHandlerServer struct {
	grpc.ServerStream
}

func (x *sharedStreamHandlerServer) Send(m *SharedMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *sharedStreamHandlerServer) Recv() (*SharedMessage, error) {
	m := new(SharedMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Shared_ServiceDesc is the grpc.ServiceDesc for Shared service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Shared_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "prc.Shared",
	HandlerType: (*SharedServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamHandler",
			Handler:       _Shared_StreamHandler_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "shared.proto",
}
