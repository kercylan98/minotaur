// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package cm

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GossipClient is the client API for Gossip service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GossipClient interface {
	StreamHandler(ctx context.Context, opts ...grpc.CallOption) (Gossip_StreamHandlerClient, error)
}

type gossipClient struct {
	cc grpc.ClientConnInterface
}

func NewGossipClient(cc grpc.ClientConnInterface) GossipClient {
	return &gossipClient{cc}
}

func (c *gossipClient) StreamHandler(ctx context.Context, opts ...grpc.CallOption) (Gossip_StreamHandlerClient, error) {
	stream, err := c.cc.NewStream(ctx, &Gossip_ServiceDesc.Streams[0], "/cm.Gossip/StreamHandler", opts...)
	if err != nil {
		return nil, err
	}
	x := &gossipStreamHandlerClient{stream}
	return x, nil
}

type Gossip_StreamHandlerClient interface {
	Send(*GossipPacket) error
	Recv() (*GossipPacket, error)
	grpc.ClientStream
}

type gossipStreamHandlerClient struct {
	grpc.ClientStream
}

func (x *gossipStreamHandlerClient) Send(m *GossipPacket) error {
	return x.ClientStream.SendMsg(m)
}

func (x *gossipStreamHandlerClient) Recv() (*GossipPacket, error) {
	m := new(GossipPacket)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GossipServer is the server API for Gossip service.
// All implementations must embed UnimplementedGossipServer
// for forward compatibility
type GossipServer interface {
	StreamHandler(Gossip_StreamHandlerServer) error
	mustEmbedUnimplementedGossipServer()
}

// UnimplementedGossipServer must be embedded to have forward compatible implementations.
type UnimplementedGossipServer struct {
}

func (UnimplementedGossipServer) StreamHandler(Gossip_StreamHandlerServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamHandler not implemented")
}
func (UnimplementedGossipServer) mustEmbedUnimplementedGossipServer() {}

// UnsafeGossipServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GossipServer will
// result in compilation errors.
type UnsafeGossipServer interface {
	mustEmbedUnimplementedGossipServer()
}

func RegisterGossipServer(s grpc.ServiceRegistrar, srv GossipServer) {
	s.RegisterService(&Gossip_ServiceDesc, srv)
}

func _Gossip_StreamHandler_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GossipServer).StreamHandler(&gossipStreamHandlerServer{stream})
}

type Gossip_StreamHandlerServer interface {
	Send(*GossipPacket) error
	Recv() (*GossipPacket, error)
	grpc.ServerStream
}

type gossipStreamHandlerServer struct {
	grpc.ServerStream
}

func (x *gossipStreamHandlerServer) Send(m *GossipPacket) error {
	return x.ServerStream.SendMsg(m)
}

func (x *gossipStreamHandlerServer) Recv() (*GossipPacket, error) {
	m := new(GossipPacket)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Gossip_ServiceDesc is the grpc.ServiceDesc for Gossip service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Gossip_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cm.Gossip",
	HandlerType: (*GossipServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamHandler",
			Handler:       _Gossip_StreamHandler_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "cm.proto",
}
