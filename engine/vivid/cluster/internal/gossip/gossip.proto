syntax = "proto3";
package gossip;
option go_package = "github.com/kercylan98/minotaur/engine/vivid/cluster/internal/gossip";

import "process_id.proto";

// 初始化集群，此刻节点准备尝试加入其他集群或创建集群
message GossipActorInitClusterMessage {
  int64 retry_interval_duration = 1; // 重试间隔
}

// 节点携带自身信息尝试加入集群，在收到 GossipActorTryJoinClusterAckMessage
message GossipActorTryJoinClusterMessage {
  Node node = 1; // 加入者节点信息
}

// 尝试加入集群确认消息
message GossipActorTryJoinClusterAckMessage {
  bool refuse = 1; // 拒绝
  Gossiped gossiped = 2; // 节点状态同步
  prc.ProcessId handler = 3; // 处理人
}

// 创建集群消息（正常应该为本地使用）
message GossipActorCreateClusterMessage {}

// 扩散节点状态
message GossipActorSyncNodeStatusMessage {
  GossipNodeStatus status = 1; // 节点状态
  prc.ProcessId node = 2; // 节点 ID
}

// 集群已收敛（正常应该为本地使用）
message GossipActorClusterConvergedMessage {}

// 节点信息
message Node {
  NodeId id = 1; // 节点 ID
  GossipNodeStatus status = 2; // 节点状态
  VectorClock vc = 3; // 矢量时钟
}

// 节点 ID
message NodeId {
  prc.ProcessId ref = 1; // 节点引用
  int64 guid = 2; // 同节点唯一标识
}

// Gossip 状态
message Gossip {
  repeated Node members = 1; // 集群成员
  repeated NodeId seen = 2; // 已seen的节点
}

// Gossiped 已传播到达的状态
message Gossiped {
  Gossip gossip = 1; // gossip
  VectorClock gossiper_version = 2; // 发送者版本
}

// GossipedAckMessage 对于 Gossiped 的消息确认
message GossipedAckMessage {
  Gossiped gossiped = 1;
}

// 该消息用于表示节点需要离开集群，通常为本地发送给 GossipActor
message GossipActorLeaveClusterMessage {}

message GossipActorPingPongMessage {}

// 节点状态
enum GossipNodeStatus {
  GNS_Joining = 0; // 加入中
  GNS_Alive = 1; // 活跃
  GNS_Leaving = 2; // 正在离开
  GNS_Exit = 3; // 退出
  GNS_Removed = 4; // 移除
  GNS_Unreachable = 5; // 不可达
  GNS_Reachable = 6; // 可达（网络恢复期间缓冲）
}

// 矢量时钟结构
message VectorClock {
  map<string, uint64> version = 1; // 使用 key-value 对存储每个节点的版本
}

enum VectorClockOrdering {
  VCO_Concurrent = 0; // 并行
  VCO_After = 1; // 之后
  VCO_Before = 2; // 之前
  VCO_Same = 3; // 相同
}