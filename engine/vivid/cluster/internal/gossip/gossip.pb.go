// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v4.25.3
// source: gossip.proto

package gossip

import (
	prc "github.com/kercylan98/minotaur/engine/prc"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 节点状态
type GossipNodeStatus int32

const (
	GossipNodeStatus_GNS_Joining     GossipNodeStatus = 0 // 加入中
	GossipNodeStatus_GNS_Alive       GossipNodeStatus = 1 // 活跃
	GossipNodeStatus_GNS_Leaving     GossipNodeStatus = 2 // 正在离开
	GossipNodeStatus_GNS_Exit        GossipNodeStatus = 3 // 退出
	GossipNodeStatus_GNS_Removed     GossipNodeStatus = 4 // 移除
	GossipNodeStatus_GNS_Unreachable GossipNodeStatus = 5 // 不可达
	GossipNodeStatus_GNS_Reachable   GossipNodeStatus = 6 // 可达（网络恢复期间缓冲）
)

// Enum value maps for GossipNodeStatus.
var (
	GossipNodeStatus_name = map[int32]string{
		0: "GNS_Joining",
		1: "GNS_Alive",
		2: "GNS_Leaving",
		3: "GNS_Exit",
		4: "GNS_Removed",
		5: "GNS_Unreachable",
		6: "GNS_Reachable",
	}
	GossipNodeStatus_value = map[string]int32{
		"GNS_Joining":     0,
		"GNS_Alive":       1,
		"GNS_Leaving":     2,
		"GNS_Exit":        3,
		"GNS_Removed":     4,
		"GNS_Unreachable": 5,
		"GNS_Reachable":   6,
	}
)

func (x GossipNodeStatus) Enum() *GossipNodeStatus {
	p := new(GossipNodeStatus)
	*p = x
	return p
}

func (x GossipNodeStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GossipNodeStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_gossip_proto_enumTypes[0].Descriptor()
}

func (GossipNodeStatus) Type() protoreflect.EnumType {
	return &file_gossip_proto_enumTypes[0]
}

func (x GossipNodeStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GossipNodeStatus.Descriptor instead.
func (GossipNodeStatus) EnumDescriptor() ([]byte, []int) {
	return file_gossip_proto_rawDescGZIP(), []int{0}
}

type VectorClockOrdering int32

const (
	VectorClockOrdering_VCO_Concurrent VectorClockOrdering = 0 // 并行
	VectorClockOrdering_VCO_After      VectorClockOrdering = 1 // 之后
	VectorClockOrdering_VCO_Before     VectorClockOrdering = 2 // 之前
	VectorClockOrdering_VCO_Same       VectorClockOrdering = 3 // 相同
)

// Enum value maps for VectorClockOrdering.
var (
	VectorClockOrdering_name = map[int32]string{
		0: "VCO_Concurrent",
		1: "VCO_After",
		2: "VCO_Before",
		3: "VCO_Same",
	}
	VectorClockOrdering_value = map[string]int32{
		"VCO_Concurrent": 0,
		"VCO_After":      1,
		"VCO_Before":     2,
		"VCO_Same":       3,
	}
)

func (x VectorClockOrdering) Enum() *VectorClockOrdering {
	p := new(VectorClockOrdering)
	*p = x
	return p
}

func (x VectorClockOrdering) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VectorClockOrdering) Descriptor() protoreflect.EnumDescriptor {
	return file_gossip_proto_enumTypes[1].Descriptor()
}

func (VectorClockOrdering) Type() protoreflect.EnumType {
	return &file_gossip_proto_enumTypes[1]
}

func (x VectorClockOrdering) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VectorClockOrdering.Descriptor instead.
func (VectorClockOrdering) EnumDescriptor() ([]byte, []int) {
	return file_gossip_proto_rawDescGZIP(), []int{1}
}

// 初始化集群，此刻节点准备尝试加入其他集群或创建集群
type GossipActorInitClusterMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RetryIntervalDuration int64 `protobuf:"varint,1,opt,name=retry_interval_duration,json=retryIntervalDuration,proto3" json:"retry_interval_duration,omitempty"` // 重试间隔
}

func (x *GossipActorInitClusterMessage) Reset() {
	*x = GossipActorInitClusterMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gossip_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GossipActorInitClusterMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GossipActorInitClusterMessage) ProtoMessage() {}

func (x *GossipActorInitClusterMessage) ProtoReflect() protoreflect.Message {
	mi := &file_gossip_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GossipActorInitClusterMessage.ProtoReflect.Descriptor instead.
func (*GossipActorInitClusterMessage) Descriptor() ([]byte, []int) {
	return file_gossip_proto_rawDescGZIP(), []int{0}
}

func (x *GossipActorInitClusterMessage) GetRetryIntervalDuration() int64 {
	if x != nil {
		return x.RetryIntervalDuration
	}
	return 0
}

// 节点携带自身信息尝试加入集群，在收到 GossipActorTryJoinClusterAckMessage
type GossipActorTryJoinClusterMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Node *Node `protobuf:"bytes,1,opt,name=node,proto3" json:"node,omitempty"` // 加入者节点信息
}

func (x *GossipActorTryJoinClusterMessage) Reset() {
	*x = GossipActorTryJoinClusterMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gossip_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GossipActorTryJoinClusterMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GossipActorTryJoinClusterMessage) ProtoMessage() {}

func (x *GossipActorTryJoinClusterMessage) ProtoReflect() protoreflect.Message {
	mi := &file_gossip_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GossipActorTryJoinClusterMessage.ProtoReflect.Descriptor instead.
func (*GossipActorTryJoinClusterMessage) Descriptor() ([]byte, []int) {
	return file_gossip_proto_rawDescGZIP(), []int{1}
}

func (x *GossipActorTryJoinClusterMessage) GetNode() *Node {
	if x != nil {
		return x.Node
	}
	return nil
}

// 尝试加入集群确认消息
type GossipActorTryJoinClusterAckMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Refuse   bool           `protobuf:"varint,1,opt,name=refuse,proto3" json:"refuse,omitempty"`    // 拒绝
	Gossiped *Gossiped      `protobuf:"bytes,2,opt,name=gossiped,proto3" json:"gossiped,omitempty"` // 节点状态同步
	Handler  *prc.ProcessId `protobuf:"bytes,3,opt,name=handler,proto3" json:"handler,omitempty"`   // 处理人
}

func (x *GossipActorTryJoinClusterAckMessage) Reset() {
	*x = GossipActorTryJoinClusterAckMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gossip_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GossipActorTryJoinClusterAckMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GossipActorTryJoinClusterAckMessage) ProtoMessage() {}

func (x *GossipActorTryJoinClusterAckMessage) ProtoReflect() protoreflect.Message {
	mi := &file_gossip_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GossipActorTryJoinClusterAckMessage.ProtoReflect.Descriptor instead.
func (*GossipActorTryJoinClusterAckMessage) Descriptor() ([]byte, []int) {
	return file_gossip_proto_rawDescGZIP(), []int{2}
}

func (x *GossipActorTryJoinClusterAckMessage) GetRefuse() bool {
	if x != nil {
		return x.Refuse
	}
	return false
}

func (x *GossipActorTryJoinClusterAckMessage) GetGossiped() *Gossiped {
	if x != nil {
		return x.Gossiped
	}
	return nil
}

func (x *GossipActorTryJoinClusterAckMessage) GetHandler() *prc.ProcessId {
	if x != nil {
		return x.Handler
	}
	return nil
}

// 创建集群消息（正常应该为本地使用）
type GossipActorCreateClusterMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GossipActorCreateClusterMessage) Reset() {
	*x = GossipActorCreateClusterMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gossip_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GossipActorCreateClusterMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GossipActorCreateClusterMessage) ProtoMessage() {}

func (x *GossipActorCreateClusterMessage) ProtoReflect() protoreflect.Message {
	mi := &file_gossip_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GossipActorCreateClusterMessage.ProtoReflect.Descriptor instead.
func (*GossipActorCreateClusterMessage) Descriptor() ([]byte, []int) {
	return file_gossip_proto_rawDescGZIP(), []int{3}
}

// 扩散节点状态
type GossipActorSyncNodeStatusMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status GossipNodeStatus `protobuf:"varint,1,opt,name=status,proto3,enum=gossip.GossipNodeStatus" json:"status,omitempty"` // 节点状态
	Node   *prc.ProcessId   `protobuf:"bytes,2,opt,name=node,proto3" json:"node,omitempty"`                                   // 节点 ID
}

func (x *GossipActorSyncNodeStatusMessage) Reset() {
	*x = GossipActorSyncNodeStatusMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gossip_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GossipActorSyncNodeStatusMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GossipActorSyncNodeStatusMessage) ProtoMessage() {}

func (x *GossipActorSyncNodeStatusMessage) ProtoReflect() protoreflect.Message {
	mi := &file_gossip_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GossipActorSyncNodeStatusMessage.ProtoReflect.Descriptor instead.
func (*GossipActorSyncNodeStatusMessage) Descriptor() ([]byte, []int) {
	return file_gossip_proto_rawDescGZIP(), []int{4}
}

func (x *GossipActorSyncNodeStatusMessage) GetStatus() GossipNodeStatus {
	if x != nil {
		return x.Status
	}
	return GossipNodeStatus_GNS_Joining
}

func (x *GossipActorSyncNodeStatusMessage) GetNode() *prc.ProcessId {
	if x != nil {
		return x.Node
	}
	return nil
}

// 集群已收敛（正常应该为本地使用）
type GossipActorClusterConvergedMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GossipActorClusterConvergedMessage) Reset() {
	*x = GossipActorClusterConvergedMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gossip_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GossipActorClusterConvergedMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GossipActorClusterConvergedMessage) ProtoMessage() {}

func (x *GossipActorClusterConvergedMessage) ProtoReflect() protoreflect.Message {
	mi := &file_gossip_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GossipActorClusterConvergedMessage.ProtoReflect.Descriptor instead.
func (*GossipActorClusterConvergedMessage) Descriptor() ([]byte, []int) {
	return file_gossip_proto_rawDescGZIP(), []int{5}
}

// 节点信息
type Node struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     *NodeId          `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                                       // 节点 ID
	Status GossipNodeStatus `protobuf:"varint,2,opt,name=status,proto3,enum=gossip.GossipNodeStatus" json:"status,omitempty"` // 节点状态
	Vc     *VectorClock     `protobuf:"bytes,3,opt,name=vc,proto3" json:"vc,omitempty"`                                       // 矢量时钟
}

func (x *Node) Reset() {
	*x = Node{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gossip_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Node) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Node) ProtoMessage() {}

func (x *Node) ProtoReflect() protoreflect.Message {
	mi := &file_gossip_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Node.ProtoReflect.Descriptor instead.
func (*Node) Descriptor() ([]byte, []int) {
	return file_gossip_proto_rawDescGZIP(), []int{6}
}

func (x *Node) GetId() *NodeId {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Node) GetStatus() GossipNodeStatus {
	if x != nil {
		return x.Status
	}
	return GossipNodeStatus_GNS_Joining
}

func (x *Node) GetVc() *VectorClock {
	if x != nil {
		return x.Vc
	}
	return nil
}

// 节点 ID
type NodeId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ref  *prc.ProcessId `protobuf:"bytes,1,opt,name=ref,proto3" json:"ref,omitempty"`    // 节点引用
	Guid int64          `protobuf:"varint,2,opt,name=guid,proto3" json:"guid,omitempty"` // 同节点唯一标识
}

func (x *NodeId) Reset() {
	*x = NodeId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gossip_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeId) ProtoMessage() {}

func (x *NodeId) ProtoReflect() protoreflect.Message {
	mi := &file_gossip_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeId.ProtoReflect.Descriptor instead.
func (*NodeId) Descriptor() ([]byte, []int) {
	return file_gossip_proto_rawDescGZIP(), []int{7}
}

func (x *NodeId) GetRef() *prc.ProcessId {
	if x != nil {
		return x.Ref
	}
	return nil
}

func (x *NodeId) GetGuid() int64 {
	if x != nil {
		return x.Guid
	}
	return 0
}

// Gossip 状态
type Gossip struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Members []*Node   `protobuf:"bytes,1,rep,name=members,proto3" json:"members,omitempty"` // 集群成员
	Seen    []*NodeId `protobuf:"bytes,2,rep,name=seen,proto3" json:"seen,omitempty"`       // 已seen的节点
}

func (x *Gossip) Reset() {
	*x = Gossip{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gossip_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Gossip) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Gossip) ProtoMessage() {}

func (x *Gossip) ProtoReflect() protoreflect.Message {
	mi := &file_gossip_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Gossip.ProtoReflect.Descriptor instead.
func (*Gossip) Descriptor() ([]byte, []int) {
	return file_gossip_proto_rawDescGZIP(), []int{8}
}

func (x *Gossip) GetMembers() []*Node {
	if x != nil {
		return x.Members
	}
	return nil
}

func (x *Gossip) GetSeen() []*NodeId {
	if x != nil {
		return x.Seen
	}
	return nil
}

// Gossiped 已传播到达的状态
type Gossiped struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Gossip          *Gossip      `protobuf:"bytes,1,opt,name=gossip,proto3" json:"gossip,omitempty"`                                          // gossip
	GossiperVersion *VectorClock `protobuf:"bytes,2,opt,name=gossiper_version,json=gossiperVersion,proto3" json:"gossiper_version,omitempty"` // 发送者版本
}

func (x *Gossiped) Reset() {
	*x = Gossiped{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gossip_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Gossiped) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Gossiped) ProtoMessage() {}

func (x *Gossiped) ProtoReflect() protoreflect.Message {
	mi := &file_gossip_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Gossiped.ProtoReflect.Descriptor instead.
func (*Gossiped) Descriptor() ([]byte, []int) {
	return file_gossip_proto_rawDescGZIP(), []int{9}
}

func (x *Gossiped) GetGossip() *Gossip {
	if x != nil {
		return x.Gossip
	}
	return nil
}

func (x *Gossiped) GetGossiperVersion() *VectorClock {
	if x != nil {
		return x.GossiperVersion
	}
	return nil
}

// GossipedAckMessage 对于 Gossiped 的消息确认
type GossipedAckMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Gossiped *Gossiped `protobuf:"bytes,1,opt,name=gossiped,proto3" json:"gossiped,omitempty"`
}

func (x *GossipedAckMessage) Reset() {
	*x = GossipedAckMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gossip_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GossipedAckMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GossipedAckMessage) ProtoMessage() {}

func (x *GossipedAckMessage) ProtoReflect() protoreflect.Message {
	mi := &file_gossip_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GossipedAckMessage.ProtoReflect.Descriptor instead.
func (*GossipedAckMessage) Descriptor() ([]byte, []int) {
	return file_gossip_proto_rawDescGZIP(), []int{10}
}

func (x *GossipedAckMessage) GetGossiped() *Gossiped {
	if x != nil {
		return x.Gossiped
	}
	return nil
}

// 该消息用于表示节点需要离开集群，通常为本地发送给 GossipActor
type GossipActorLeaveClusterMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GossipActorLeaveClusterMessage) Reset() {
	*x = GossipActorLeaveClusterMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gossip_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GossipActorLeaveClusterMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GossipActorLeaveClusterMessage) ProtoMessage() {}

func (x *GossipActorLeaveClusterMessage) ProtoReflect() protoreflect.Message {
	mi := &file_gossip_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GossipActorLeaveClusterMessage.ProtoReflect.Descriptor instead.
func (*GossipActorLeaveClusterMessage) Descriptor() ([]byte, []int) {
	return file_gossip_proto_rawDescGZIP(), []int{11}
}

type GossipActorPingPongMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GossipActorPingPongMessage) Reset() {
	*x = GossipActorPingPongMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gossip_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GossipActorPingPongMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GossipActorPingPongMessage) ProtoMessage() {}

func (x *GossipActorPingPongMessage) ProtoReflect() protoreflect.Message {
	mi := &file_gossip_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GossipActorPingPongMessage.ProtoReflect.Descriptor instead.
func (*GossipActorPingPongMessage) Descriptor() ([]byte, []int) {
	return file_gossip_proto_rawDescGZIP(), []int{12}
}

// 矢量时钟结构
type VectorClock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version map[string]uint64 `protobuf:"bytes,1,rep,name=version,proto3" json:"version,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"` // 使用 key-value 对存储每个节点的版本
}

func (x *VectorClock) Reset() {
	*x = VectorClock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gossip_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VectorClock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VectorClock) ProtoMessage() {}

func (x *VectorClock) ProtoReflect() protoreflect.Message {
	mi := &file_gossip_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VectorClock.ProtoReflect.Descriptor instead.
func (*VectorClock) Descriptor() ([]byte, []int) {
	return file_gossip_proto_rawDescGZIP(), []int{13}
}

func (x *VectorClock) GetVersion() map[string]uint64 {
	if x != nil {
		return x.Version
	}
	return nil
}

var File_gossip_proto protoreflect.FileDescriptor

var file_gossip_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x67, 0x6f, 0x73, 0x73, 0x69, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06,
	0x67, 0x6f, 0x73, 0x73, 0x69, 0x70, 0x1a, 0x10, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f,
	0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x57, 0x0a, 0x1d, 0x47, 0x6f, 0x73, 0x73,
	0x69, 0x70, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x69, 0x74, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x36, 0x0a, 0x17, 0x72, 0x65, 0x74,
	0x72, 0x79, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x72, 0x65, 0x74, 0x72,
	0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0x44, 0x0a, 0x20, 0x47, 0x6f, 0x73, 0x73, 0x69, 0x70, 0x41, 0x63, 0x74, 0x6f, 0x72,
	0x54, 0x72, 0x79, 0x4a, 0x6f, 0x69, 0x6e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x20, 0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x67, 0x6f, 0x73, 0x73, 0x69, 0x70, 0x2e, 0x4e, 0x6f, 0x64,
	0x65, 0x52, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x22, 0x95, 0x01, 0x0a, 0x23, 0x47, 0x6f, 0x73, 0x73,
	0x69, 0x70, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x54, 0x72, 0x79, 0x4a, 0x6f, 0x69, 0x6e, 0x43, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x41, 0x63, 0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x72, 0x65, 0x66, 0x75, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x72, 0x65, 0x66, 0x75, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x08, 0x67, 0x6f, 0x73, 0x73, 0x69,
	0x70, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x67, 0x6f, 0x73, 0x73,
	0x69, 0x70, 0x2e, 0x47, 0x6f, 0x73, 0x73, 0x69, 0x70, 0x65, 0x64, 0x52, 0x08, 0x67, 0x6f, 0x73,
	0x73, 0x69, 0x70, 0x65, 0x64, 0x12, 0x28, 0x0a, 0x07, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x63, 0x2e, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x49, 0x64, 0x52, 0x07, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x22,
	0x21, 0x0a, 0x1f, 0x47, 0x6f, 0x73, 0x73, 0x69, 0x70, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x22, 0x78, 0x0a, 0x20, 0x47, 0x6f, 0x73, 0x73, 0x69, 0x70, 0x41, 0x63, 0x74, 0x6f,
	0x72, 0x53, 0x79, 0x6e, 0x63, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x30, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x67, 0x6f, 0x73, 0x73, 0x69, 0x70, 0x2e,
	0x47, 0x6f, 0x73, 0x73, 0x69, 0x70, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x22, 0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x63, 0x2e, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x49, 0x64, 0x52, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x22, 0x24, 0x0a, 0x22,
	0x47, 0x6f, 0x73, 0x73, 0x69, 0x70, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x67, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x22, 0x7d, 0x0a, 0x04, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x67, 0x6f, 0x73, 0x73, 0x69, 0x70, 0x2e,
	0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x30, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x67, 0x6f, 0x73,
	0x73, 0x69, 0x70, 0x2e, 0x47, 0x6f, 0x73, 0x73, 0x69, 0x70, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x23, 0x0a, 0x02,
	0x76, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x67, 0x6f, 0x73, 0x73, 0x69,
	0x70, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x02, 0x76,
	0x63, 0x22, 0x3e, 0x0a, 0x06, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x03, 0x72,
	0x65, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x63, 0x2e, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x64, 0x52, 0x03, 0x72, 0x65, 0x66, 0x12, 0x12, 0x0a,
	0x04, 0x67, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x67, 0x75, 0x69,
	0x64, 0x22, 0x54, 0x0a, 0x06, 0x47, 0x6f, 0x73, 0x73, 0x69, 0x70, 0x12, 0x26, 0x0a, 0x07, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x67,
	0x6f, 0x73, 0x73, 0x69, 0x70, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x73, 0x12, 0x22, 0x0a, 0x04, 0x73, 0x65, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x67, 0x6f, 0x73, 0x73, 0x69, 0x70, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x49,
	0x64, 0x52, 0x04, 0x73, 0x65, 0x65, 0x6e, 0x22, 0x72, 0x0a, 0x08, 0x47, 0x6f, 0x73, 0x73, 0x69,
	0x70, 0x65, 0x64, 0x12, 0x26, 0x0a, 0x06, 0x67, 0x6f, 0x73, 0x73, 0x69, 0x70, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x67, 0x6f, 0x73, 0x73, 0x69, 0x70, 0x2e, 0x47, 0x6f, 0x73,
	0x73, 0x69, 0x70, 0x52, 0x06, 0x67, 0x6f, 0x73, 0x73, 0x69, 0x70, 0x12, 0x3e, 0x0a, 0x10, 0x67,
	0x6f, 0x73, 0x73, 0x69, 0x70, 0x65, 0x72, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x67, 0x6f, 0x73, 0x73, 0x69, 0x70, 0x2e, 0x56,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x0f, 0x67, 0x6f, 0x73, 0x73,
	0x69, 0x70, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x42, 0x0a, 0x12, 0x47,
	0x6f, 0x73, 0x73, 0x69, 0x70, 0x65, 0x64, 0x41, 0x63, 0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x2c, 0x0a, 0x08, 0x67, 0x6f, 0x73, 0x73, 0x69, 0x70, 0x65, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x67, 0x6f, 0x73, 0x73, 0x69, 0x70, 0x2e, 0x47, 0x6f, 0x73,
	0x73, 0x69, 0x70, 0x65, 0x64, 0x52, 0x08, 0x67, 0x6f, 0x73, 0x73, 0x69, 0x70, 0x65, 0x64, 0x22,
	0x20, 0x0a, 0x1e, 0x47, 0x6f, 0x73, 0x73, 0x69, 0x70, 0x41, 0x63, 0x74, 0x6f, 0x72, 0x4c, 0x65,
	0x61, 0x76, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x22, 0x1c, 0x0a, 0x1a, 0x47, 0x6f, 0x73, 0x73, 0x69, 0x70, 0x41, 0x63, 0x74, 0x6f, 0x72,
	0x50, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22,
	0x85, 0x01, 0x0a, 0x0b, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x12,
	0x3a, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x67, 0x6f, 0x73, 0x73, 0x69, 0x70, 0x2e, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x1a, 0x3a, 0x0a, 0x0c, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x2a, 0x8a, 0x01, 0x0a, 0x10, 0x47, 0x6f, 0x73, 0x73,
	0x69, 0x70, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0f, 0x0a, 0x0b,
	0x47, 0x4e, 0x53, 0x5f, 0x4a, 0x6f, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x10, 0x00, 0x12, 0x0d, 0x0a,
	0x09, 0x47, 0x4e, 0x53, 0x5f, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b,
	0x47, 0x4e, 0x53, 0x5f, 0x4c, 0x65, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x10, 0x02, 0x12, 0x0c, 0x0a,
	0x08, 0x47, 0x4e, 0x53, 0x5f, 0x45, 0x78, 0x69, 0x74, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x47,
	0x4e, 0x53, 0x5f, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f,
	0x47, 0x4e, 0x53, 0x5f, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x10,
	0x05, 0x12, 0x11, 0x0a, 0x0d, 0x47, 0x4e, 0x53, 0x5f, 0x52, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62,
	0x6c, 0x65, 0x10, 0x06, 0x2a, 0x56, 0x0a, 0x13, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x6c,
	0x6f, 0x63, 0x6b, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x12, 0x0a, 0x0e, 0x56,
	0x43, 0x4f, 0x5f, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x10, 0x00, 0x12,
	0x0d, 0x0a, 0x09, 0x56, 0x43, 0x4f, 0x5f, 0x41, 0x66, 0x74, 0x65, 0x72, 0x10, 0x01, 0x12, 0x0e,
	0x0a, 0x0a, 0x56, 0x43, 0x4f, 0x5f, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x10, 0x02, 0x12, 0x0c,
	0x0a, 0x08, 0x56, 0x43, 0x4f, 0x5f, 0x53, 0x61, 0x6d, 0x65, 0x10, 0x03, 0x42, 0x45, 0x5a, 0x43,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6b, 0x65, 0x72, 0x63, 0x79,
	0x6c, 0x61, 0x6e, 0x39, 0x38, 0x2f, 0x6d, 0x69, 0x6e, 0x6f, 0x74, 0x61, 0x75, 0x72, 0x2f, 0x65,
	0x6e, 0x67, 0x69, 0x6e, 0x65, 0x2f, 0x76, 0x69, 0x76, 0x69, 0x64, 0x2f, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x67, 0x6f, 0x73,
	0x73, 0x69, 0x70, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_gossip_proto_rawDescOnce sync.Once
	file_gossip_proto_rawDescData = file_gossip_proto_rawDesc
)

func file_gossip_proto_rawDescGZIP() []byte {
	file_gossip_proto_rawDescOnce.Do(func() {
		file_gossip_proto_rawDescData = protoimpl.X.CompressGZIP(file_gossip_proto_rawDescData)
	})
	return file_gossip_proto_rawDescData
}

var file_gossip_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_gossip_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_gossip_proto_goTypes = []interface{}{
	(GossipNodeStatus)(0),                       // 0: gossip.GossipNodeStatus
	(VectorClockOrdering)(0),                    // 1: gossip.VectorClockOrdering
	(*GossipActorInitClusterMessage)(nil),       // 2: gossip.GossipActorInitClusterMessage
	(*GossipActorTryJoinClusterMessage)(nil),    // 3: gossip.GossipActorTryJoinClusterMessage
	(*GossipActorTryJoinClusterAckMessage)(nil), // 4: gossip.GossipActorTryJoinClusterAckMessage
	(*GossipActorCreateClusterMessage)(nil),     // 5: gossip.GossipActorCreateClusterMessage
	(*GossipActorSyncNodeStatusMessage)(nil),    // 6: gossip.GossipActorSyncNodeStatusMessage
	(*GossipActorClusterConvergedMessage)(nil),  // 7: gossip.GossipActorClusterConvergedMessage
	(*Node)(nil),                           // 8: gossip.Node
	(*NodeId)(nil),                         // 9: gossip.NodeId
	(*Gossip)(nil),                         // 10: gossip.Gossip
	(*Gossiped)(nil),                       // 11: gossip.Gossiped
	(*GossipedAckMessage)(nil),             // 12: gossip.GossipedAckMessage
	(*GossipActorLeaveClusterMessage)(nil), // 13: gossip.GossipActorLeaveClusterMessage
	(*GossipActorPingPongMessage)(nil),     // 14: gossip.GossipActorPingPongMessage
	(*VectorClock)(nil),                    // 15: gossip.VectorClock
	nil,                                    // 16: gossip.VectorClock.VersionEntry
	(*prc.ProcessId)(nil),                  // 17: prc.ProcessId
}
var file_gossip_proto_depIdxs = []int32{
	8,  // 0: gossip.GossipActorTryJoinClusterMessage.node:type_name -> gossip.Node
	11, // 1: gossip.GossipActorTryJoinClusterAckMessage.gossiped:type_name -> gossip.Gossiped
	17, // 2: gossip.GossipActorTryJoinClusterAckMessage.handler:type_name -> prc.ProcessId
	0,  // 3: gossip.GossipActorSyncNodeStatusMessage.status:type_name -> gossip.GossipNodeStatus
	17, // 4: gossip.GossipActorSyncNodeStatusMessage.node:type_name -> prc.ProcessId
	9,  // 5: gossip.Node.id:type_name -> gossip.NodeId
	0,  // 6: gossip.Node.status:type_name -> gossip.GossipNodeStatus
	15, // 7: gossip.Node.vc:type_name -> gossip.VectorClock
	17, // 8: gossip.NodeId.ref:type_name -> prc.ProcessId
	8,  // 9: gossip.Gossip.members:type_name -> gossip.Node
	9,  // 10: gossip.Gossip.seen:type_name -> gossip.NodeId
	10, // 11: gossip.Gossiped.gossip:type_name -> gossip.Gossip
	15, // 12: gossip.Gossiped.gossiper_version:type_name -> gossip.VectorClock
	11, // 13: gossip.GossipedAckMessage.gossiped:type_name -> gossip.Gossiped
	16, // 14: gossip.VectorClock.version:type_name -> gossip.VectorClock.VersionEntry
	15, // [15:15] is the sub-list for method output_type
	15, // [15:15] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_gossip_proto_init() }
func file_gossip_proto_init() {
	if File_gossip_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_gossip_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GossipActorInitClusterMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gossip_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GossipActorTryJoinClusterMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gossip_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GossipActorTryJoinClusterAckMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gossip_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GossipActorCreateClusterMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gossip_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GossipActorSyncNodeStatusMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gossip_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GossipActorClusterConvergedMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gossip_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Node); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gossip_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gossip_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Gossip); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gossip_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Gossiped); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gossip_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GossipedAckMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gossip_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GossipActorLeaveClusterMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gossip_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GossipActorPingPongMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gossip_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VectorClock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_gossip_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_gossip_proto_goTypes,
		DependencyIndexes: file_gossip_proto_depIdxs,
		EnumInfos:         file_gossip_proto_enumTypes,
		MessageInfos:      file_gossip_proto_msgTypes,
	}.Build()
	File_gossip_proto = out.File
	file_gossip_proto_rawDesc = nil
	file_gossip_proto_goTypes = nil
	file_gossip_proto_depIdxs = nil
}
