syntax = "proto3";
package messages;
option go_package = "/github.com/kercylan98/minotaur/engine/vivid/internal/messages";

import "process_id.proto";
import "google/protobuf/timestamp.proto";

// Terminated 当收到该消息时，说明 TerminatedActor 已经被终止，如果是自身，那么表示自身已被终止。
message Terminated {
  prc.ProcessId terminated_process = 1;
}

message Watch {

}

message Unwatch {

}

message SlowProcess {
  int64 duration = 1; // 耗时
  prc.ProcessId pid = 2; // 耗时进程
}

// 发起订阅请求，订阅者将与特定主题下的消息进行绑定，届时会收到该主题下所有类型的消息。
// 该请求还应使用 Ask 或 FutureAsk 进行投递，否则将无法接收到回复的订阅信息，也就意味着无法取消订阅。
message SubscribeRequest {
  string topic = 1;
  prc.ProcessId subscriber = 2;
}

// 取消订阅请求，订阅者将不再收到该主题下的消息。
message UnsubscribeRequest {
  Subscription subscription = 1;
}

// 由 SubscribeRequest 发起后响应得到的订阅信息，用于标识订阅者与主题之间的绑定关系，也用于解除绑定。
message Subscription {
  string topic = 1;
  uint64 id = 2;
  prc.ProcessId subscriber = 3;
}

// 发布广播消息的请求，它是在发布者投递消息后，如果存在远端节点，那么将对远端节点发送该请求进行广播。
message PublishRequestBroadcast {
  string message_type = 1;
  bytes data = 2;
  string topic = 3;
  prc.ProcessId publisher = 4;
}

message AbyssMessageEvent {
  prc.ProcessId sender = 1;
  prc.ProcessId receiver = 2;
  prc.ProcessId forward = 3;
  string message_type = 4;
  bytes data = 5;
  google.protobuf.Timestamp timestamp = 6;
}